// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\app\daily\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\daily\\page.js")
  handler satisfies AppPageConfig<"/daily">
}

// Validate ..\..\app\leaderboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\leaderboard\\page.js")
  handler satisfies AppPageConfig<"/leaderboard">
}

// Validate ..\..\app\login\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\login\\page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ..\..\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\app\profile\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\profile\\page.js")
  handler satisfies AppPageConfig<"/profile">
}

// Validate ..\..\app\topic\[id]\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\topic\\[id]\\page.js")
  handler satisfies AppPageConfig<"/topic/[id]">
}

// Validate ..\..\app\upgrade\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\upgrade\\page.js")
  handler satisfies AppPageConfig<"/upgrade">
}

// Validate ..\..\app\api\admin\rotate-daily\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\admin\\rotate-daily\\route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/rotate-daily">
}

// Validate ..\..\app\api\admin\snapshot-leaderboard\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\admin\\snapshot-leaderboard\\route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/snapshot-leaderboard">
}

// Validate ..\..\app\api\chat\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\chat\\route.js")
  handler satisfies RouteHandlerConfig<"/api/chat">
}

// Validate ..\..\app\api\conversations\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\conversations\\route.js")
  handler satisfies RouteHandlerConfig<"/api/conversations">
}

// Validate ..\..\app\api\daily\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\daily\\route.js")
  handler satisfies RouteHandlerConfig<"/api/daily">
}

// Validate ..\..\app\api\leaderboard\daily\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\leaderboard\\daily\\route.js")
  handler satisfies RouteHandlerConfig<"/api/leaderboard/daily">
}

// Validate ..\..\app\api\leaderboard\lifetime\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\leaderboard\\lifetime\\route.js")
  handler satisfies RouteHandlerConfig<"/api/leaderboard/lifetime">
}

// Validate ..\..\app\api\leaderboard\streaks\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\leaderboard\\streaks\\route.js")
  handler satisfies RouteHandlerConfig<"/api/leaderboard/streaks">
}

// Validate ..\..\app\api\messages\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\messages\\route.js")
  handler satisfies RouteHandlerConfig<"/api/messages">
}

// Validate ..\..\app\api\plan-tasks\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\plan-tasks\\route.js")
  handler satisfies RouteHandlerConfig<"/api/plan-tasks">
}

// Validate ..\..\app\api\plans\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\plans\\route.js")
  handler satisfies RouteHandlerConfig<"/api/plans">
}

// Validate ..\..\app\api\profile\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\profile\\route.js")
  handler satisfies RouteHandlerConfig<"/api/profile">
}

// Validate ..\..\app\api\progress\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\progress\\route.js")
  handler satisfies RouteHandlerConfig<"/api/progress">
}

// Validate ..\..\app\api\quest-number\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\quest-number\\route.js")
  handler satisfies RouteHandlerConfig<"/api/quest-number">
}

// Validate ..\..\app\api\questions\generate\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\questions\\generate\\route.js")
  handler satisfies RouteHandlerConfig<"/api/questions/generate">
}

// Validate ..\..\app\api\quiz\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\quiz\\route.js")
  handler satisfies RouteHandlerConfig<"/api/quiz">
}

// Validate ..\..\app\api\stripe\checkout\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\stripe\\checkout\\route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/checkout">
}

// Validate ..\..\app\api\stripe\portal\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\stripe\\portal\\route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/portal">
}

// Validate ..\..\app\api\stripe\webhook\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\stripe\\webhook\\route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/webhook">
}

// Validate ..\..\app\api\subscription\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\subscription\\route.js")
  handler satisfies RouteHandlerConfig<"/api/subscription">
}

// Validate ..\..\app\api\topics\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\topics\\route.js")
  handler satisfies RouteHandlerConfig<"/api/topics">
}





// Validate ..\..\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
